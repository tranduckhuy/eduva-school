import {
  AfterViewInit,
  ChangeDetectionStrategy,
  ElementRef,
  Component,
  OnInit,
  computed,
  effect,
  inject,
  signal,
  viewChild,
} from '@angular/core';
import {
  ReactiveFormsModule,
  FormBuilder,
  FormGroup,
  Validators,
} from '@angular/forms';
import { CommonModule } from '@angular/common';

import { TextareaModule } from 'primeng/textarea';
import { ButtonModule } from 'primeng/button';
import { CarouselModule } from 'primeng/carousel';

import { ResourcesStateService } from '../services/utils/resources-state.service';
import { AiJobsService } from '../services/api/ai-jobs.service';
import { AiSocketService } from '../services/api/ai-socket.service';

import { ChatMessageComponent } from './chat-message/chat-message.component';

import { type CreateAiJobsRequest } from '../models/request/command/create-ai-jobs-request.model';

interface ChatMessage {
  sender: 'user' | 'system';
  content: string;
  isLoading?: boolean;
}

interface AiResponseMessage {
  previewContent?: string;
  audioCost?: number;
  videoCost?: number;
  failureReason?: string | null;
}

@Component({
  selector: 'generate-lesson-chat',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    TextareaModule,
    ButtonModule,
    CarouselModule,
    ChatMessageComponent,
  ],
  templateUrl: './generate-lesson-chat.component.html',
  styleUrl: './generate-lesson-chat.component.css',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class GenerateLessonChatComponent implements OnInit, AfterViewInit {
  private readonly scrollContainer = viewChild<ElementRef>('scrollContainer');

  private readonly fb = inject(FormBuilder);
  private readonly resourcesStateService = inject(ResourcesStateService);
  private readonly aiJobService = inject(AiJobsService);
  private readonly aiSocketService = inject(AiSocketService);

  readonly job = this.aiJobService.job;

  readonly jobUpdateProgress = this.aiSocketService.jobUpdateProgress;

  readonly checkedFiles = this.resourcesStateService.checkedFiles;
  readonly hasPreviewContentSuccessfully =
    this.resourcesStateService.hasPreviewContentSuccessfully;
  readonly totalUploaded = this.resourcesStateService.totalSources;
  readonly totalChecked = this.resourcesStateService.totalCheckedSources;
  readonly isLoading = this.resourcesStateService.isLoading;

  messages = signal<ChatMessage[]>([]);
  showScrollButton = signal(false);

  disabledSendButton = computed(() => {
    return (
      this.totalChecked() === 0 ||
      this.isLoading() ||
      this.hasPreviewContentSuccessfully()
    );
  });

  form: FormGroup = this.fb.group({
    topic: ['', Validators.required],
  });

  readonly buttons = [
    { title: 'B√†i h·ªçc t·∫ø b√†o sinh v·∫≠t' },
    { title: 'Ng∆∞·ªùi l√≠nh trong T√¢y Ti·∫øn' },
    { title: 'Ph∆∞∆°ng tr√¨nh hai ·∫©n' },
  ];

  readonly responsiveOptions = [
    { breakpoint: '1400px', numVisible: 2, numScroll: 1 },
    { breakpoint: '1199px', numVisible: 3, numScroll: 1 },
    { breakpoint: '767px', numVisible: 2, numScroll: 1 },
    { breakpoint: '575px', numVisible: 1, numScroll: 1 },
  ];

  constructor() {
    effect(
      () => {
        const payload = this.jobUpdateProgress();
        if (!payload) return;

        const { previewContent, failureReason } = payload;
        if (previewContent || failureReason) {
          this.scrollToBottom();
          this.displaySystemAiMessage(payload);
          this.resourcesStateService.updateIsLoading(false);
          this.resourcesStateService.markGeneratedPreviewContentSuccess();
        }
      },
      { allowSignalWrites: true }
    );
  }

  ngOnInit(): void {
    const job = this.job();

    if (!job) return;

    this.scrollToBottom();
    this.restoreMessagesFromJob(job);

    this.resourcesStateService.markGeneratedSuccess();
    this.resourcesStateService.updateHasInteracted(true);
  }

  ngAfterViewInit(): void {
    this.scrollContainer()?.nativeElement.addEventListener('scroll', () => {
      const container = this.scrollContainer()?.nativeElement;
      if (!container) return;
      const nearBottom =
        container.scrollHeight - container.scrollTop - container.clientHeight <
        200;
      this.showScrollButton.set(!nearBottom);
    });
  }

  get topic() {
    return this.form.get('topic');
  }

  submitMessage(): void {
    if (this.form.invalid || this.isLoading()) return;

    const content = this.topic?.value.trim();
    if (!content) return;

    this.resourcesStateService.updateHasInteracted(true);
    this.messages.update(prev => [...prev, { sender: 'user', content }]);

    this.createAiJob();
    this.form.reset();
  }

  handleChipClick(title: string): void {
    if (this.isLoading()) return;

    const content = `T·∫°o b√†i gi·∫£ng v·ªÅ ${title}`;
    this.resourcesStateService.updateHasInteracted(true);
    this.messages.update(prev => [...prev, { sender: 'user', content }]);

    this.form.patchValue({ topic: content });

    this.createAiJob();
    this.form.reset();
  }

  onEnterKey(event: Event): void {
    event.preventDefault();
    const keyboardEvent = event as KeyboardEvent;
    if (
      keyboardEvent.shiftKey ||
      this.form.invalid ||
      this.totalChecked() === 0 ||
      this.isLoading()
    )
      return;
    this.submitMessage();
  }

  scrollToBottom(): void {
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        const container = this.scrollContainer()?.nativeElement;
        container?.scrollTo({ top: container.scrollHeight });
      });
    });
  }

  private createAiJob(): void {
    this.scrollToBottom();
    this.resourcesStateService.updateIsLoading(true);
    this.resourcesStateService.resetGeneratedStatus();
    this.resourcesStateService.resetGeneratedPreviewContentStatus();

    this.messages.update(prev => [
      ...prev,
      { sender: 'system', content: '', isLoading: true },
    ]);

    const topic = this.topic?.value.trim();
    if (!topic) {
      this.resourcesStateService.updateIsLoading(false);
      return;
    }

    const request: CreateAiJobsRequest = {
      file: this.checkedFiles(),
      topic,
    };

    this.aiJobService.createAiJobs(request).subscribe({
      next: res => {
        if (!res?.jobId) {
          this.resourcesStateService.updateIsLoading(false);
          return;
        }

        this.aiSocketService.resetSignal();
        this.aiSocketService.connect(res.jobId);
      },
      error: () => {
        this.scrollToBottom();
        this.resourcesStateService.updateIsLoading(false);
      },
    });
  }

  private displaySystemAiMessage({
    previewContent,
    audioCost,
    videoCost,
    failureReason,
  }: AiResponseMessage): void {
    const content = failureReason
      ? this.renderFailureMessage(failureReason)
      : this.renderSuccessMessage(previewContent, audioCost, videoCost);

    this.messages.update(prev => {
      const updated = [...prev];
      const idx = updated.findIndex(m => m.sender === 'system' && m.isLoading);

      const newMessage: ChatMessage = {
        sender: 'system',
        content,
        isLoading: false,
      };

      if (idx !== -1) updated[idx] = newMessage;
      else updated.push(newMessage);

      return updated;
    });

    if (!failureReason) {
      this.resourcesStateService.markGeneratedPreviewContentSuccess();
    }
  }

  private renderFailureMessage(reason: string): string {
    return `
      <div class="text-red-500 font-medium">
        <p>üò¢ <strong>R·∫•t ti·∫øc!</strong> Qu√° tr√¨nh t·∫°o n·ªôi dung kh√¥ng th√†nh c√¥ng.</p>
        <p>L√Ω do: <em>${reason}</em></p>
        <p>Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu v√† th·ª≠ l·∫°i sau.</p>
      </div>
    `;
  }

  private renderSuccessMessage(
    previewContent?: string,
    audioCost?: number,
    videoCost?: number
  ): string {
    const previewBlock = previewContent
      ? `
        <div class="bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700 text-sm leading-relaxed text-gray-700 dark:text-gray-300 mb-3">
          ${previewContent}...
        </div>
      `
      : '';

    return `
      <div class="mb-3">
        <h4 class="font-semibold text-lg mb-2 text-gray-800 dark:text-gray-100">
          üéì N·ªôi dung b√†i gi·∫£ng ƒë√£ s·∫µn s√†ng!
        </h4>

        <p class="mb-2 text-gray-700 dark:text-gray-300">
          ƒê√¢y l√† <strong>b·∫£n nh√°p g·ª£i √Ω</strong> d·ª±a tr√™n ch·ªß ƒë·ªÅ b·∫°n ƒë√£ cung c·∫•p. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a, b·ªï sung ho·∫∑c ph√°t tri·ªÉn th√™m ƒë·ªÉ t·∫°o n√™n m·ªôt b√†i gi·∫£ng h·∫•p d·∫´n v√† truy·ªÅn c·∫£m h·ª©ng cho ng∆∞·ªùi h·ªçc.
        </p>
        <p class="mb-2 text-gray-700 dark:text-gray-300">
          Sau khi b·∫°n t·∫°o n·ªôi dung ch√≠nh th·ª©c, ph·∫ßn b·∫£n nh√°p n√†y s·∫Ω <strong>kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ</strong>. N·ªôi dung ho√†n t·∫•t s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ trong h·ªá th·ªëng ƒë·ªÉ b·∫°n c√≥ th·ªÉ thao t√°c v·ªõi n·ªôi dung ƒë√£ t·∫°o ra.
        </p>

        ${previewBlock}

        <div class="mb-2 text-sm text-gray-600 dark:text-gray-400 italic">
          <p>üéß T·∫°o b·∫£n ghi √¢m (audio): <strong>${audioCost}</strong> Ecoin</p>
          <p>üéûÔ∏è T·∫°o video minh ho·∫° (c√≥ gi·ªçng ƒë·ªçc + h√¨nh ·∫£nh): <strong>${videoCost}</strong> Ecoin</p>
        </div>

        <p class="mb-2 text-gray-700 dark:text-gray-300">
          N·∫øu b·∫°n ƒë·ªìng √Ω v·ªõi chi ph√≠ hi·ªÉn th·ªã ·ªü tr√™n, h√£y ti·∫øp t·ª•c b·∫±ng c√°ch nh·∫•n n√∫t <strong>"T·∫°o n·ªôi dung"</strong> ·ªü ph·∫ßn b√™n ph·∫£i ƒë·ªÉ b·∫Øt ƒë·∫ßu t·∫°o n·ªôi dung ch√≠nh th·ª©c.
        </p>

        <p class="mb-2 text-gray-700 dark:text-gray-300">
          <strong>EDUVA</strong> xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng h·ªá th·ªëng!
        </p>

        <p class="mt-3 text-xs text-primary">
          * L∆∞u √Ω: Chi ph√≠ ch·ªâ ƒë∆∞·ª£c t√≠nh khi b·∫°n th·ª±c hi·ªán t·∫°o s·∫£n ph·∫©m ch√≠nh th·ª©c.
        </p>
      </div>
    `;
  }

  private renderReadOnlySuccessMessage(): string {
    return `
      <div class="mb-3">
        <h4 class="font-semibold text-lg mb-2 text-gray-800 dark:text-gray-100">
          ‚úÖ N·ªôi dung b√†i gi·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!
        </h4>

        <p class="mb-2 text-gray-700 dark:text-gray-300">
          B·∫°n c√≥ th·ªÉ <strong>xem tr∆∞·ªõc ho·∫∑c t·∫£i xu·ªëng</strong> n·ªôi dung n√†y ·ªü ph·∫ßn b√™n ph·∫£i.
        </p>

        <p class="mb-2 text-gray-700 dark:text-gray-300">
          N·∫øu b·∫°n mu·ªën t·∫°o n·ªôi dung m·ªõi, vui l√≤ng quay l·∫°i trang qu·∫£n l√Ω v√† b·∫Øt ƒë·∫ßu l·∫°i v·ªõi m·ªôt y√™u c·∫ßu kh√°c.
        </p>

        <p class="mt-3 text-xs text-primary">
          * L∆∞u √Ω: B·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a ho·∫∑c t·∫°o l·∫°i n·ªôi dung n√†y t·∫°i b∆∞·ªõc n√†y.
        </p>
      </div>
    `;
  }

  private restoreMessagesFromJob(job: {
    topic: string;
    previewContent?: string;
    audioCost?: number;
    videoCost?: number;
    failureReason?: string | null;
  }): void {
    const userMessage: ChatMessage = {
      sender: 'user',
      content: job.topic,
    };

    const systemMessage: ChatMessage = {
      sender: 'system',
      content: job.failureReason
        ? this.renderFailureMessage(job.failureReason)
        : this.renderReadOnlySuccessMessage(),
      isLoading: false,
    };

    this.messages.set([userMessage, systemMessage]);
  }
}
