name: Frontend Build and Sonar Scan

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    name: Build Frontend and SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app for production
        run: npx ng build --configuration=production
        env:
          BASE_API_URL: ${{ secrets.BASE_API_URL || 'https://api.eduva.example.com' }}
          CLIENT_URL: ${{ secrets.CLIENT_URL || 'https://api.eduva.example.com' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://api.eduva.example.com' }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY || 'https://api.eduva.example.com' }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
        with:
          args: >
            -Dsonar.projectKey=Eduva-School
            -Dsonar.organization=eduva
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=src/**/*.spec.ts
            -Dsonar.exclusions=src/**/*.spec.ts,src/environments/**,src/assets/**

      - name: Run SonarQube Scanner for brief report
        if: success()
        id: sonar_scan_report
        run: |
          # Extract top issues from SonarQube API
          SONAR_PROJECT_KEY="Eduva-School"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}"

          # Wait a moment for SonarQube to process results
          sleep 15

          # Get issues count by severity and code coverage
          ISSUES_SUMMARY=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&resolved=false&ps=1" | jq -r '.total')
          BUGS_COUNT=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=BUG&resolved=false&ps=1" | jq -r '.total')
          VULNERABILITIES=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=VULNERABILITY&resolved=false&ps=1" | jq -r '.total')
          CODE_SMELLS=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=CODE_SMELL&resolved=false&ps=1" | jq -r '.total')

          # Try multiple approaches to get code coverage
          # First attempt with component measures API
          CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?componentKey=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.component.measures[0].value // "N/A"')

          # If coverage is still N/A, try with the measures search API
          if [ "$CODE_COVERAGE" = "N/A" ] || [ -z "$CODE_COVERAGE" ]; then
            echo "Trying alternative approach to get coverage..."
            CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/search?projectKeys=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.measures[0].value // "N/A"')
          fi

          # If coverage is still N/A, try with a longer wait time and retry
          if [ "$CODE_COVERAGE" = "N/A" ] || [ -z "$CODE_COVERAGE" ]; then
            echo "Waiting longer for coverage data to be processed..."
            sleep 30
            CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?componentKey=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.component.measures[0].value // "N/A"')
          fi

          # Create issue summary as output
          ISSUE_SUMMARY="Total issues: $ISSUES_SUMMARY\n- üêõ Bugs: $BUGS_COUNT\n- üîí Vulnerabilities: $VULNERABILITIES\n- üßπ Code Smells: $CODE_SMELLS\n- üìä Code Coverage: $CODE_COVERAGE%"
          echo "issue_summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ISSUE_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add SonarQube summary to PR
        if: success() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Frontend SonarQube Analysis Complete ‚úÖ

            ${{ steps.sonar_scan_report.outputs.issue_summary }}

            [View detailed analysis results on SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=Eduva-School)
